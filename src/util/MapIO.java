package util;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;

import Wall.Brick;
import Wall.Grass;
import Wall.Iron;
import Wall.River;
import frame.MapEditorPanel;
import frame.WallType;
import model.Wall;

/**
 * 地图信息
 * @author zsh
 *
 */
public class MapIO {
	public final static String PathOfMapData="mapdata\\";//地图方块坐标的文件内的坐标数据
	public final static String PathOfMapImage="level\\";//各个关卡的地图图像路径
	
	/**
	 * 获取每张地图对应的墙块的集合
	 */
	public static List<Wall> readMap(String mapName){
		File file=new File(PathOfMapData+mapName+".map");//所有数据文件后缀为.map,数据完整名为地图名+后缀
		return readMap(file);
	}
	/**
	 * 把墙块集合到指定文件
	 */
	public static boolean writeMap(String mapName) {
		File file =new File(PathOfMapData+mapName+".map");
		return writeMap(file);
	}
	/**
	 * 写出墙块集合到指定文件
	 */
	public static boolean writeMap(File file) {
		StringBuffer brickBuffer=new StringBuffer("BRICK=");//保存所有砖墙的坐标
		StringBuffer grassBuffer=new StringBuffer("GRASS=");//保存所有草地的坐标
		StringBuffer ironBuffer=new StringBuffer("IRON=");//保存所有铁块的坐标
		StringBuffer riverBuffer=new StringBuffer("RIVER=");//保存所有河流的坐标
		List<Wall> walls=MapEditorPanel.walls;//获取地图编辑版面的墙块集合
		for(int i=0;i<walls.size();i++) {
			Wall w=walls.get(i);//获取每个墙块对象
			if(w.isAlive()) {//如果存活
				if(w instanceof Brick) {
					brickBuffer.append(w.x+","+w.y+";");//加到砖墙坐标后
				}
				else if(w instanceof Grass) {
					grassBuffer.append(w.x+","+w.y+";");//加到草地坐标后
				}
				else if(w instanceof Iron) {
					ironBuffer.append(w.x+","+w.y+";");//加到铁墙坐标后
				}
				else if(w instanceof River) {
					riverBuffer.append(w.x+","+w.y+";");//加到河流坐标后
				}
			}
		}
		BufferedWriter writer=null;//文件写入
		try {
			
			writer=new BufferedWriter(new FileWriter(file));
			if(!brickBuffer.toString().equals("BRICK=")) {
				writer.write(brickBuffer.toString().toCharArray());
				writer.newLine();
				writer.flush();
			}
			if(!grassBuffer.toString().equals("GRASS=")) {
				writer.write(brickBuffer.toString().toCharArray());
				writer.newLine();
				writer.flush();
			}
			if(!ironBuffer.toString().equals("IRON=")) {
				writer.write(brickBuffer.toString().toCharArray());
				writer.newLine();
				writer.flush();
			}
			if(!riverBuffer.toString().equals("RIVER=")) {
				writer.write(brickBuffer.toString().toCharArray());
				writer.newLine();
				writer.flush();
			}
			if(writer!=null) {
				writer.close();
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	/**
	 * 获取地图所有墙块
	 */
	public static List<Wall> readMap(File file){
		Properties pro = new Properties();// 创建属性集对象
		List<Wall> walls = new ArrayList<>();// 创建总墙块集合
		try {
			pro.load(new FileInputStream(file));// 属性集对象读取地图文件
			String brickStr = (String) pro.get(WallType.BRICK.name());// 读取地图文件中砖墙名称属性的字符串数据
			String grassStr = (String) pro.get(WallType.GRASS.name());// 读取地图文件中草地名称属性的字符串数据
			String riverStr = (String) pro.get(WallType.RIVER.name());// 读取地图文件中河流名称属性的字符串数据
			String ironStr = (String) pro.get(WallType.IRON.name());// 读取地图文件中铁墙名称属性的字符串数据
			if (brickStr != null) {// 如果读取的砖墙数据不是null
				walls.addAll(readWall(brickStr, WallType.BRICK));// 解析数据，并将数据中解析出的墙块集合添加到总墙块集合中
			}
			if (grassStr != null) {// 如果读取的草地数据不是null
				walls.addAll(readWall(grassStr, WallType.GRASS));// 解析数据，并将数据中解析出的墙块集合添加到总墙块集合中
			}
			if (riverStr != null) {// 如果读取的河流数据不是null
				walls.addAll(readWall(riverStr, WallType.RIVER));// 解析数据，并将数据中解析出的墙块集合添加到总墙块集合中
			}
			if (ironStr != null) {// 如果读取的铁墙数据不是null
				walls.addAll(readWall(ironStr, WallType.IRON));// 解析数据，并将数据中解析出的墙块集合添加到总墙块集合中
			}
			return walls;// 返回总墙块集合
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	private static List<Wall> readWall(String data, WallType type) {
		String walls[] = data.split(";");// 使用“;”分割字符串
		Wall wall;// 创建墙块对象
		List<Wall> w = new ArrayList<>();// 创建墙块集合
		switch (type) {// 判断墙块类型
		case BRICK:// 如果是砖墙
			for (String wStr : walls) {// 遍历分割结果
				String axes[] = wStr.split(",");// 使用“,”分割字符串
				// 创建墙块对象，分割的第一个值为横坐标，分割的第二个值为纵坐标
				wall = new Brick(Integer.parseInt(axes[0]), Integer.parseInt(axes[1]));// 在此坐标上创建砖墙对象
				w.add(wall);// 集合中添加此墙块
			}
			break;
		case RIVER:// 如果是河流
			for (String wStr : walls) {// 遍历分割结果
				String axes[] = wStr.split(",");// 使用“,”分割字符串
				// 创建墙块对象，分割的第一个值为横坐标，分割的第二个值为纵坐标
				wall = new River(Integer.parseInt(axes[0]), Integer.parseInt(axes[1]));// 在此坐标上创建河流对象
				w.add(wall);// 集合中添加此墙块
			}
			break;
		case GRASS:// 如果是草地
			for (String wStr : walls) {// 遍历分割结果
				String axes[] = wStr.split(",");// 使用“,”分割字符串
				// 创建墙块对象，分割的第一个值为横坐标，分割的第二个值为纵坐标
				wall = new Grass(Integer.parseInt(axes[0]), Integer.parseInt(axes[1]));// 在此坐标上创建草地对象
				w.add(wall);// 集合中添加此墙块
			}
			break;
		case IRON:// 如果是铁墙
			for (String wStr : walls) {// 遍历分割结果
				String axes[] = wStr.split(",");// 使用“,”分割字符串
				// 创建墙块对象，分割的第一个值为横坐标，分割的第二个值为纵坐标
				wall = new Iron(Integer.parseInt(axes[0]), Integer.parseInt(axes[1]));// 在此坐标上创建铁墙对象
				w.add(wall);// 集合中添加此墙块
			}
			break;
		default:
			break;
		}
		return w;// 返回墙块集合
	}
	public static void removeDuplicate(List list) {
		HashSet h=new HashSet(list);
		list.clear();
		list.addAll(h);
	}
}
